services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: dataqrl
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    command: ["mongod", "--bind_ip_all", "--maxConns", "1000"]


  gateway:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - upload-service
      - processing-service
      - events-service
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../../frontend
      dockerfile: ../infrastructure/docker/docker/frontend/Dockerfile
      args:
        - NGINX_CONFIG=../infrastructure/nginx/frontend.conf
    environment:
      - NODE_ENV=production
    volumes:
      - ../nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network
    ports:
      - "8080:8080"

  upload-service:
    user: root
    build:
      context: ../../backend
      dockerfile: ../infrastructure/docker/docker/upload/Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_DIR=${UPLOAD_DIR}
    volumes:
      - uploads_data:/app/uploads/:rw
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  processing-service:
    user: root
    build:
      context: ../../backend
      dockerfile: ../infrastructure/docker/docker/processing/Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_DIR=${UPLOAD_DIR}

    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - uploads_data:/app/uploads/

  events-service:
    user: root
    build:
      context: ../../backend
      dockerfile: ../infrastructure/docker/docker/events/Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - UPLOAD_DIR=${UPLOAD_DIR}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - uploads_data:/app/uploads/

  swagger-ui:
    image: swaggerapi/swagger-ui:v5.17.14
    environment:
      SWAGGER_JSON: /oas/openapi.yml
    ports:
      - "${DOCS_PORT}:8080"
    volumes:
      - ../../openapi:/oas
    networks:
      - app-network

volumes:
  redis_data:
  mongodb_data:
  uploads_data:
    driver: local

networks:
  app-network: