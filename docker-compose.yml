version: '3.8'

networks:
  frontend:
    external: false
  backend:
    external: false

services:
  # Nginx Gateway
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
    networks:
      - frontend
      - backend
    depends_on:
      - upload-service
      - processing-service
      - events-service
      - frontend

  # Infrastructure Services
  mongodb:
    image: mongo:6
    command: ["--replSet", "rs0", "--bind_ip_all"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: fileapp
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-fileapp_password}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  mongo-init:
    image: mongo:6
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb:27017 -u fileapp -p ${MONGO_PASSWORD:-fileapp_password} --eval
      '
      rs.initiate({
        _id: "rs0",
        members: [{ _id: 0, host: "mongodb:27017" }]
      })
      '
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-fileapp_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-fileapp_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  upload-service:
    build:
      context: .
      dockerfile: ./services/upload/Dockerfile
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://fileapp:${MONGO_PASSWORD:-fileapp_password}@mongodb:27017/fileapp?replicaSet=rs0
      REDIS_URL: redis://:${REDIS_PASSWORD:-fileapp_redis_password}@redis:6379
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 104857600
    volumes:
      - uploads:/app/uploads
    networks:
      - backend
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  processing-service:
    build:
      context: .
      dockerfile: ./services/processing/Dockerfile
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://fileapp:${MONGO_PASSWORD:-fileapp_password}@mongodb:27017/fileapp?replicaSet=rs0
      REDIS_URL: redis://:${REDIS_PASSWORD:-fileapp_redis_password}@redis:6379
      UPLOAD_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
    networks:
      - backend
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  events-service:
    build:
      context: .
      dockerfile: ./services/events/Dockerfile
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD:-fileapp_redis_password}@redis:6379
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        order: start-first
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production
      VITE_API_URL: http://api.localhost
    networks:
      - frontend
    depends_on:
      - upload-service
      - processing-service
      - events-service

volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
  uploads:
  nginx_logs: